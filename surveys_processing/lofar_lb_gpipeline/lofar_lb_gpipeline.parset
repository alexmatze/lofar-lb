# Long baseline pipeline
# Uses the results from prefactor
# It needs the .npy amplitude and clock solutions to be placed in transfer_amp_clock_sols_store. They are not changed.
# It needs the instrument tables to be placed in phase_sol_input_path. THESE ARE UPDATED IN PLACE AT THE MOMENT. BACK THEM UP FIRST!


# parameters you will need to adjust.
! shift_avg_timestep   = 4   # averaging time step after shifting and phase up
! shift_avg_freqstep   = 16  # averaging freq step after shifting and phase up
! working_directory    = /data/scratch/coughlan/wd2/lofar_lb_gpipeline
! job_directory        = input.output.job_directory
! results_directory    = /data/scratch/coughlan/results
! target_input_path    = /data/scratch/coughlan/targetdata #/data/scratch/deller/L401323
! target_input_pattern = L*.MS
! phaseup_command      = {TS001:'CS*'}
! num_SBs_per_group	   = 1	# should be same as for prefactor run!

# location of existing calibration solutions
! phase_sol_input_path        = /data/scratch/coughlan/test_parmdbs
! phase_sol_input_pattern     = L*.instrument
! transfer_amp_clock_sols_script = /data/scratch/coughlan/lofar_lb_gpipeline/bin/transfer_amplitudes+clock+offset_toMS.py
! transfer_amp_clock_sols_store  = /data/scratch/deller/calibration-tables/prefacet-new

# pathes to the scripts etc.
! is_amp_corr_script             = /data/scratch/coughlan/lofar_lb_gpipeline/bin/updateISGains.py
! is_phase_corr_script	   		 = /data/scratch/coughlan/lofar_lb_gpipeline/bin/addInternationalStations.py
! concat_fitsconvert_script      = /data/scratch/coughlan/lofar_lb_gpipeline/bin/concat_fitsconvert.py
! ms2uvfits_path                 = ms2uvfits
! convert_to_circ_run_script     = /data/scratch/coughlan/lofar_lb_gpipeline/bin/execute_circ_pol_conv.py
! lin_to_circ_path               = /data/scratch/coughlan/lofar-lb/MSToCircular/simple2circ.py # could be simple2circ or mscorpol

# set this to True if you want the pipeline run to continue if single bands fail
! error_tolerance           =  False




pipeline.steps=[createmap_target , ndppp_prep_cal , transfer_amp_clock_sols, is_amp_gains, createmap_ps, match_files, is_add_phase, make_group_map, expand_mapfile, ndppp_apply_cal, main_loop]



#####################################################################################################################################################################
#
#
#	Probably no need to edit below this line. You can edit pipeline.steps above to continue running from a certain place. You may also need to edit the statefile in the runtime directory
#
#
#####################################################################################################################################################################


# generate a mapfile of all the target data
createmap_target.control.kind            =   plugin
createmap_target.control.type            =   createMapfile
createmap_target.control.method          =   mapfile_from_folder
createmap_target.control.mapfile_dir     =   input.output.mapfile_dir
createmap_target.control.filename        =   createmap_target.mapfile
createmap_target.control.folder          =   {{ target_input_path }}
createmap_target.control.pattern         =   {{ target_input_pattern }}

# run NDPPP on the target data
ndppp_prep_cal.control.type                    = dppp
ndppp_prep_cal.control.max_per_node            = 10                   # \ feel free to adjust these two values to match your system
ndppp_prep_cal.control.environment             = {OMP_NUM_THREADS: 4} # / they should be reasonable for CEP3
ndppp_prep_cal.control.error_tolerance         = {{ error_tolerance }}
ndppp_prep_cal.argument.msin                   = createmap_target.output.mapfile    # The input data.
ndppp_prep_cal.argument.msin.datacolumn        = DATA
ndppp_prep_cal.argument.msin.baseline          = *&
ndppp_prep_cal.argument.msout.datacolumn       = DATA
ndppp_prep_cal.argument.msout.writefullresflag = False
ndppp_prep_cal.argument.steps                  = [flag,flagamp]
ndppp_prep_cal.argument.flag.type              = preflagger
ndppp_prep_cal.argument.flag.baseline          = [ CS013HBA* ]            # feel free to change that, but CS013 is usually bad.
ndppp_prep_cal.argument.flagamp.type           = preflagger
ndppp_prep_cal.argument.flagamp.amplmin = 1e-30

# transfer solutions to MSs
transfer_amp_clock_sols.control.type            = pythonplugin  
transfer_amp_clock_sols.control.executable      = {{ transfer_amp_clock_sols_script }}
transfer_amp_clock_sols.argument.msname         = ndppp_prep_cal.output.mapfile
transfer_amp_clock_sols.argument.npdir          = {{ transfer_amp_clock_sols_store }}
transfer_amp_clock_sols.argument.output         = outputkey

# scale international amps of table
is_amp_gains.control.type            = pythonplugin  
is_amp_gains.control.executable      = {{ is_amp_corr_script }}
is_amp_gains.argument.flags          = [ transfer_amp_clock_sols.output.mapfile ]

# create a mapfile of the phase solution tables
createmap_ps.control.kind            =   plugin
createmap_ps.control.type            =   createMapfile
createmap_ps.control.method          =   mapfile_from_folder
createmap_ps.control.mapfile_dir     =   input.output.mapfile_dir
createmap_ps.control.filename        =   createmap_ps.mapfile
createmap_ps.control.folder          =   {{ phase_sol_input_path }}
createmap_ps.control.pattern         =   {{ phase_sol_input_pattern }}



# Find appropriate MSs to match with phase solutions (which are probably from a group)
# Note - if no exact match is found, the nearest MS will be used to provide antenna info
match_files.control.kind            =   plugin
match_files.control.type            =   FindCorrespondingMS
match_files.control.mapfile_dir     =   input.output.mapfile_dir
match_files.control.filename        =   match_files.mapfile
match_files.control.mapfile_grpd	=   createmap_ps.output.mapfile
match_files.control.mapfile_ms      =   ndppp_prep_cal.output.mapfile

# add international stations to phase solutions
is_add_phase.control.type            = pythonplugin  
is_add_phase.control.executable      = {{ is_phase_corr_script }}
is_add_phase.argument.flags          = [ createmap_ps.output.mapfile , match_files.output.mapfile ]

# Expand phase solution mapfiles to size of data
#expand_mapfile.control.kind            =   plugin
#expand_mapfile.control.type            =   ExpandSingle
#expand_mapfile.control.mapfile_dir     =   input.output.mapfile_dir
#expand_mapfile.control.filename        =   expand_mapfile.mapfile
#expand_mapfile.control.mapfile_in      =   createmap_ps.output.mapfile
#expand_mapfile.control.mapfile_comp    =   ndppp_prep_cal.output.mapfile
#expand_mapfile.control.n_expand        =   {{ num_SBs_per_group }}

# sort the target data into groups to match with the calibrator parsets
make_group_map.control.kind            =   plugin
make_group_map.control.type            =   groupMapfileObsSB
make_group_map.control.mapfile_dir     =   input.output.mapfile_dir
make_group_map.control.filename        =   make_group_map.mapfile
make_group_map.control.mapfile_in      =   ndppp_prep_cal.output.mapfile
make_group_map.control.numSB           =   {{ num_SBs_per_group }}
make_group_map.control.NDPPPfill       =   True
make_group_map.control.truncateLastSBs =   True   # This means that a excess subbands that don't make a full group get discarded

# match data with calibrator parsets
expand_mapfile.control.kind            =   plugin
expand_mapfile.control.type            =   mapfileSingleToGroup
expand_mapfile.control.mapfile_dir     =   input.output.mapfile_dir
expand_mapfile.control.filename        =   make_group_map.mapfile
expand_mapfile.control.mapfile_in      =   createmap_ps.output.mapfile
expand_mapfile.control.mapfile_groups  =   make_group_map.output.mapfile

# run NDPPP to apply the solutions to the target data
ndppp_apply_cal.control.type                    = dppp
ndppp_apply_cal.control.max_per_node            = 10                   # \ feel free to adjust these two values to match your system
ndppp_apply_cal.control.environment             = {OMP_NUM_THREADS: 4} # / they should be reasonable for CEP3
ndppp_apply_cal.control.error_tolerance         = {{ error_tolerance }}
ndppp_apply_cal.control.outputkey           	=  
ndppp_apply_cal.argument.msin					= ndppp_prep_cal.output.mapfile
ndppp_apply_cal.argument.msin.datacolumn        = DATA
ndppp_apply_cal.argument.msin.baseline          = *&
ndppp_apply_cal.argument.msout					= .
ndppp_apply_cal.argument.msout.datacolumn       = CORRECTED_DATA
ndppp_apply_cal.argument.msout.writefullresflag = False
ndppp_apply_cal.argument.steps                  = [applyAmp, applyClock, ApplyPhase, applytheBeam]
ndppp_apply_cal.argument.applyAmp.type               = applycal
ndppp_apply_cal.argument.applyAmp.parmdb             = transfer_amp_clock_sols.output.mapfile
ndppp_apply_cal.argument.applyAmp.correction         = gain
ndppp_apply_cal.argument.applyAmp.updateweights      = false
ndppp_apply_cal.argument.applyClock.type             = applycal
ndppp_apply_cal.argument.applyClock.parmdb           = transfer_amp_clock_sols.output.mapfile
ndppp_apply_cal.argument.applyClock.correction       = clock
ndppp_apply_cal.argument.applyClock.updateweights    = false
ndppp_apply_cal.argument.ApplyPhase.type             = applycal
ndppp_apply_cal.argument.ApplyPhase.parmdb           = expand_mapfile.output.mapfile
ndppp_apply_cal.argument.ApplyPhase.correction       = gain
ndppp_apply_cal.argument.ApplyPhase.updateweights    = false
ndppp_apply_cal.argument.applytheBeam.type              = applybeam
ndppp_apply_cal.argument.applytheBeam.usechannelfreq    = true
ndppp_apply_cal.argument.applytheBeam.invert            = true
ndppp_apply_cal.argument.applytheBeam.beammode          = default

# now loop through the target phase calibrator canditates

main_loop.control.kind            = loop
main_loop.control.type            = conditional
main_loop.control.loopcount       = 100
main_loop.control.loopsteps       = [prep_dirs,sortmap_tar, dppp_phaseup,make_circ, maptosingle, fits]

# Initialise file with all directions
prep_dirs.control.kind            =   plugin
prep_dirs.control.type            =   TargetListToMapfileX
prep_dirs.control.mapfile_dir     =   input.output.mapfile_dir
prep_dirs.control.infile          =   ndppp_prep_cal.output.mapfile
prep_dirs.control.filename        =   prep_dirs.mapfile
prep_dirs.control.wd              =   {{ job_directory }}
prep_dirs.control.nP              =   3	# default was three
prep_dirs.control.counter         =   main_loop.output.counter

# sort the target data into groups so that DPPP can concatenate them
sortmap_tar.control.kind            =   plugin
sortmap_tar.control.type            =   groupMapfileObsSBX
sortmap_tar.control.mapfile_dir     =   input.output.mapfile_dir
sortmap_tar.control.filename        =   sortmap_tar.mapfile
sortmap_tar.control.mapfile_in      =   ndppp_prep_cal.output.mapfile
sortmap_tar.control.numSB           =   {{ num_SBs_per_group }}
sortmap_tar.control.NDPPPfill       =   True
sortmap_tar.control.truncateLastSBs =   True   # This means that a excess subbands that don't make a full group get discarded
sortmap_tar.control.dir             =   prep_dirs.output.cdir

# shift, average and add up stations for tied array

dppp_phaseup.control.type                 = dppp
dppp_phaseup.control.max_per_node         = 12                   # \ feel free to adjust these two values to match your system
dppp_phaseup.control.environment          = {OMP_NUM_THREADS: 2} # / they should be reasonable for CEP3
#dppp_phaseup.control.inputkey            = msin
dppp_phaseup.argument.msin                = sortmap_tar.output.mapfile    # The input data.
dppp_phaseup.control.mapfile_out          = sortmap_tar.output.groupmap # tell the pipeline to give the output useful names
dppp_phaseup.argument.msin.datacolumn     = CORRECTED_DATA
dppp_phaseup.argument.msin.missingdata    = True    #\ these two lines will make DPPP generate dummy data when
dppp_phaseup.argument.msin.orderms        = False   #/ concatenating data
dppp_phaseup.argument.msout.datacolumn    = DATA
dppp_phaseup.argument.steps               = [shift,avg, adder, filter]
dppp_phaseup.argument.shift.type          = phaseshift
dppp_phaseup.argument.shift.phasecenter   = prep_dirs.output.cords
dppp_phaseup.argument.avg.type            = squash
dppp_phaseup.argument.avg.freqstep        = {{ shift_avg_freqstep }}
dppp_phaseup.argument.avg.timestep        = {{ shift_avg_timestep }}
dppp_phaseup.argument.adder.type          = stationadder
dppp_phaseup.argument.adder.stations      = {{ phaseup_command }}
dppp_phaseup.argument.filter.type         = filter
dppp_phaseup.argument.filter.baseline     = '!CS*&*'
dppp_phaseup.argument.filter.remove       = True
  
# Convert to circular polarisation (in place)
make_circ.control.type            = pythonplugin  
make_circ.control.executable      = {{ convert_to_circ_run_script }}
make_circ.argument.flags          = [ dppp_phaseup.output.mapfile ]
make_circ.argument.cpath          = {{ lin_to_circ_path }}
make_circ.argument.do_mscorpol    = 0	# set to 1 if using mscorpol

# Get a single ms from the entries just processed by mscorpol/simple2circ
#maptosingle.control.kind            =   plugin
#maptosingle.control.type            =   mapfileGroupToSingle
#maptosingle.control.mapfile_dir     =   input.output.mapfile_dir
#maptosingle.control.filename        =   maptosingle.mapfile
#maptosingle.control.mapfile_in      =   dppp_phaseup.output.mapfile

maptosingle.control.kind            =   plugin
maptosingle.control.type            =   addMapfile
maptosingle.control.cmdline.create  =   mapfile_all_to_one
maptosingle.control.mapfile_dir     =   input.output.mapfile_dir
maptosingle.control.filename        =   maptosingle.mapfile
maptosingle.control.mapfile_in      =   dppp_phaseup.output.mapfile


# virtually concatenate rest of files and convert to FITS
fits.control.type                = pythonplugin  
fits.control.executable          = {{ concat_fitsconvert_script }}
fits.argument.flags              = [ maptosingle.output.mapfile ]
#fits.argument.mapfile_to_concat  = sortmap_tar.output.groupmap
fits.argument.ms2uvfits_path     = {{ ms2uvfits_path }}



