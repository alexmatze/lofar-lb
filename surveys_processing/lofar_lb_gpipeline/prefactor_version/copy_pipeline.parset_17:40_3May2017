#########################################################
## LOFAR long baseline calibration pipeline parset     ##
#########################################################
# Please read the instructions and report bugs on: https://github.com/varenius/lofar-lb/tree/master/surveys_processing/lofar_lb_gpipeline

# These are the steps to run.
pipeline.steps = [createmap_target , ndppp_prep_target , transfer_amp_clock_sols, is_amp_gains, createmap_ps, copy_sols, createmap_pstwo, match_files, is_add_phase, ndppp_apply_cal, calibrator_loop, get_imaging_catalogue, imaging_loop ]

# Parameter setup -- main directories
! target_input_path              =   /data/scratch/drabent/targetdata                         # directory where the unaveraged data including long baselines is stored
! phase_sol_input_path           =   /data/scratch/drabent/phase_sols                         # directory where the direction-independent phase solutions of the target field are stored
! transfer_amp_clock_sols_store  =   /data/scratch/lb_bw/prefactor_solutions/cal_results      # directory where the amplitude and clock solutions of prefactor are stored (*.npy files)
! working_directory              =   input.output.working_directory                           # internal directory, you probably don't need to adjust
! job_directory                  =   input.output.job_directory                               # internal directory, you probably don't need to adjust
! pipeline_directory             =   /data/scratch/drabent/lofar_lb_gpipeline                 # directory where you have stored the pipeline (scripts, plugins, etc.)
! lofar_directory                =   $LOFARROOT                                               # directory of your LOFAR installation. Should be the same as in pipeline.cfg.

# Parameter setup -- subdirectories
pipeline.pluginpath              =   {{ pipeline_directory }}/plugins                         # internal directory, you probably don't need to adjust
! scripts                        =   {{ pipeline_directory }}/bin                             # internal directory, you probably don't need to adjust

### Parameter setup -- variables
! shift_avg_timestep             =   8                                                        # averaging time step after shifting and phase up. Make sure this is a sensible value!
! shift_avg_freqstep             =   4                                                        # averaging freq step after shifting and phase up
! phaseup_command                =   {ST001:'CS*'}                                            # core stations or superterp?
! filter_command                 =   '!CS*&*'                                                 # remove unwanted stations
! closure_phase_stations         =   'DE601;DE605;ST001'                                      # list of stations used to derive closure phases, separated by ;
! target_input_pattern           =   L401323_SB*.MS
! phase_sol_input_pattern        =   L401323*phase.table
! num_SBs_per_group              =   244                                                      # should be the same as for prefactor run! This is also the number of SBs per AIPS IF. Make sure it's a sensible number.
! amp_sols_basename              =   caldata_transfer                                         # should be the same as for prefactor run!
! max_per_node                   =   input.output.max_per_node

! manual_targets                 =   True                                                     # Set to true if you want to specify a target list manually, otherwise targets selected using LOBOS                        
! manual_target_file             =   /data/scratch/lb_bw/lbcs_manual_target_list.txt          # only used if manual targets set to true

# this is the target catalogue of directions to image; if it doesn't exist, it will be downloaded from the LoTSS database
! target_catalogue      = /my/fake/path/PleaseProvideCatalogue.csv
# "Force" : always download , "True" download if {{ target_skymodel }} does not exist , "False" : never download
! use_lotss_target      = True


# number of processes to use per step per node
! num_proc_per_node        = 24
# number of processes to use per step per node for tasks with high i/o (dppp or cp) or memory (eg calibration)
! num_proc_per_node_limit  = 4
# number of threads per process for NDPPP
! max_dppp_threads         = 8

! error_tolerance                =   False                                                    # set this to True if you want the pipeline run to continue if single bands fail

#####################################################################################################################################################################
#
#
#	Probably no need to edit below this line. You can edit pipeline.steps above to continue running from a certain place. 
#	You may also need to edit the statefile in the runtime directory (use the script for this!)
#
#
#####################################################################################################################################################################

# generate a mapfile of all the target data
createmap_target.control.kind                     =   plugin
createmap_target.control.type                     =   createMapfile
createmap_target.control.method                   =   mapfile_from_folder
createmap_target.control.mapfile_dir              =   input.output.mapfile_dir
createmap_target.control.filename                 =   createmap_target.mapfile
createmap_target.control.folder                   =   {{ target_input_path }}
createmap_target.control.pattern                  =   {{ target_input_pattern }}

# run NDPPP on the target data
ndppp_prep_target.control.type                    =   dppp
ndppp_prep_target.control.max_per_node            =   {{ num_proc_per_node_limit }}
ndppp_prep_target.control.error_tolerance         =   {{ error_tolerance }}
ndppp_prep_target.argument.numthreads             =   {{ max_dppp_threads }}
ndppp_prep_target.argument.msin                   =   createmap_target.output.mapfile    # The input data.
ndppp_prep_target.argument.msin.datacolumn        =   DATA
ndppp_prep_target.argument.msin.baseline          =   *&
ndppp_prep_target.argument.msout.datacolumn       =   DATA
ndppp_prep_target.argument.msout.writefullresflag =   False
ndppp_prep_target.argument.steps                  =   [flag,flagamp]
ndppp_prep_target.argument.flag.type              =   preflagger
ndppp_prep_target.argument.flag.baseline          =   [ CS013HBA* ]            # feel free to change that, but CS013 is usually bad.
ndppp_prep_target.argument.flagamp.type           =   preflagger
ndppp_prep_target.argument.flagamp.amplmin        =   1e-30
ndppp_prep_target.argument.doflagging.type        =   aoflagger
ndppp_prep_target.argument.doflagging.strategy    =   {{ lofar_directory }}/share/rfistrategies/HBAdefault	# be careful using this on unaveraged data in case you run out of RAM
#ndppp_prep_target.argument.doflagging.memoryperc  =   50  ## this should be updated based on max_per_node (i.e., should go down as max_per_node increases)

#####################################################################################################################################################################
#
#
#	Prefactor output is applied.
#
#
#####################################################################################################################################################################

# transfer solutions to MSs
transfer_amp_clock_sols.control.type                 =   pythonplugin  
transfer_amp_clock_sols.control.executable           =   {{ scripts }}/transfer_amplitudes+clock+offset_toMS.py
transfer_amp_clock_sols.argument.msname              =   ndppp_prep_target.output.mapfile
transfer_amp_clock_sols.argument.npdir               =   {{ transfer_amp_clock_sols_store }}
transfer_amp_clock_sols.store_basename               =   {{ amp_sols_basename }}
transfer_amp_clock_sols.argument.output              =   outputkey

# scale international amps of table
is_amp_gains.control.type                            =   pythonplugin  
is_amp_gains.control.executable                      =   {{ scripts }}/updateISGains.py
is_amp_gains.argument.flags                          =   [ transfer_amp_clock_sols.output.mapfile ]

# create a mapfile of the phase solution measurement sets
createmap_ps.control.kind                            =   plugin
createmap_ps.control.type                            =   createMapfile
createmap_ps.control.method                          =   mapfile_from_folder
createmap_ps.control.mapfile_dir                     =   input.output.mapfile_dir
createmap_ps.control.filename                        =   createmap_ps.mapfile
createmap_ps.control.folder                          =   {{ phase_sol_input_path }}
createmap_ps.control.pattern                         =   {{ phase_sol_input_pattern }}

##### hmmmmmmmm ... 
#gsmcal_antmap.control.kind               =  plugin
#gsmcal_antmap.control.type               =  createMapfile
#gsmcal_antmap.control.method             =  add_suffix_to_file
#gsmcal_antmap.control.mapfile_in         =  dpppconcat.output.mapfile
#gsmcal_antmap.control.add_suffix_to_file =  /ANTENNA
#gsmcal_antmap.control.mapfile_dir        =  input.output.mapfile_dir
#gsmcal_antmap.control.filename = gsmcal_antmaps.mapfile

# copy the phase solutions to the working directory
copy_sols.control.kind                               =   recipe
copy_sols.control.type                               =   executable_args
copy_sols.control.executable                         =   /bin/cp
copy_sols.control.max_per_node                       =   {{ num_proc_per_node }}
copy_sols.control.mapfile_in                         =   createmap_ps.output.mapfile
copy_sols.control.inputkey                           =   source
copy_sols.control.arguments                          =   [-r,source,{{ job_directory }}]

# create a mapfile of the copied phase solution tables
createmap_pstwo.control.kind                         =   plugin
createmap_pstwo.control.type                         =   createMapfile
createmap_pstwo.control.method                       =   mapfile_from_folder
createmap_pstwo.control.mapfile_dir                  =   input.output.mapfile_dir
createmap_pstwo.control.filename                     =   createmap_pstwo.mapfile
createmap_pstwo.control.folder                       =   {{ job_directory }}
createmap_pstwo.control.pattern                      =   {{ phase_sol_input_pattern }}

# Find appropriate MSs to match with phase solutions (which are probably from a group)
# This is a custom plugin. It is matching the frequency information of the parmdbs with the corresponding measurement sets
match_files.control.kind                             =   plugin
match_files.control.type                             =   FindCorrespondingMSX
match_files.control.mapfile_dir                      =   input.output.mapfile_dir
match_files.control.filename                         =   match_files.mapfile
match_files.control.mapfile_grpd                     =   createmap_pstwo.output.mapfile
match_files.control.mapfile_ms                       =   ndppp_prep_target.output.mapfile

# add international stations to phase solutions
is_add_phase.control.type                            =   pythonplugin  
is_add_phase.control.executable                      =   {{ scripts }}/addInternationalStations.py
is_add_phase.control.mapfile_in                      =   match_files.output.tables
is_add_phase.control.inputkey                        =   tables
is_add_phase.argument.flags                          =   [ tables , match_files.output.mapfile ]

# run NDPPP to apply the solutions to the target data
ndppp_apply_cal.control.type                         =   dppp
ndppp_apply_cal.control.max_per_node                 =   {{ num_proc_per_node }}
#ndppp_apply_cal.control.environment                  =   {OMP_NUM_THREADS: 4} # / they should be reasonable for CEP3
ndppp_apply_cal.control.error_tolerance              =   {{ error_tolerance }}
ndppp_apply_cal.control.outputkey           	     =  
ndppp_apply_cal.control.mapfile_in                   =   match_files.output.parmdbs
ndppp_apply_cal.control.inputkey                     =   parmdbs
ndppp_apply_cal.argument.numthreads       	     =   {{ max_dppp_threads }}
ndppp_apply_cal.argument.msin	                     =   ndppp_prep_target.output.mapfile
ndppp_apply_cal.argument.msin.datacolumn             =   DATA
ndppp_apply_cal.argument.msin.baseline               =   *&
ndppp_apply_cal.argument.msout                       =   .
ndppp_apply_cal.argument.msout.datacolumn            =   CORRECTED_DATA
ndppp_apply_cal.argument.msout.writefullresflag      =   False
ndppp_apply_cal.argument.steps                       =   [applyAmp, applyClock, ApplyPhase, applytheBeam]
ndppp_apply_cal.argument.applyAmp.type               =   applycal
ndppp_apply_cal.argument.applyAmp.parmdb             =   transfer_amp_clock_sols.output.mapfile
ndppp_apply_cal.argument.applyAmp.correction         =   gain
ndppp_apply_cal.argument.applyAmp.updateweights      =   false
ndppp_apply_cal.argument.applyClock.type             =   applycal
ndppp_apply_cal.argument.applyClock.parmdb           =   transfer_amp_clock_sols.output.mapfile
ndppp_apply_cal.argument.applyClock.correction       =   clock
ndppp_apply_cal.argument.applyClock.updateweights    =   false
ndppp_apply_cal.argument.ApplyPhase.type             =   applycal
ndppp_apply_cal.argument.ApplyPhase.parmdb           =   parmdbs
ndppp_apply_cal.argument.ApplyPhase.correction       =   gain
ndppp_apply_cal.argument.ApplyPhase.updateweights    =   false
ndppp_apply_cal.argument.applytheBeam.type           =   applybeam
ndppp_apply_cal.argument.applytheBeam.usechannelfreq =   true
ndppp_apply_cal.argument.applytheBeam.invert         =   true
ndppp_apply_cal.argument.applytheBeam.beammode       =   default


#####################################################################################################################################################################
#
#
#	CALIBRATOR LOOP
#
#
#####################################################################################################################################################################

get_calibrator_directions

# Loop through the target phase calibrator canditates

calibrator_loop.control.kind                    =   loop
calibrator_loop.control.type                    =   conditional
calibrator_loop.control.loopcount               =   100
calibrator_loop.control.loopsteps               =   [ prep_dirs, dppp_phaseup, make_circ, make_concatmap, dppp_concat, closure_phase ] 
## steps still to add: conditional on scatter, do: run model_engine, diagonal gain, clock/tec separation, self-calibration

# Initialise file with all directions
prep_dirs.control.kind                    =   plugin
prep_dirs.control.type                    =   TargetListToMapfileX
prep_dirs.control.mapfile_dir             =   input.output.mapfile_dir
prep_dirs.control.infile                  =   ndppp_prep_target.output.mapfile
prep_dirs.control.filename                =   prep_dirs.mapfile
prep_dirs.control.wd                      =   {{ job_directory }}
prep_dirs.control.nP                      =   3	# default was three
prep_dirs.control.counter                 =   main_loop.output.counter
prep_dirs.control.manual                  =   {{ manual_targets }}  ##  get_calibrator_directions
prep_dirs.control.target_file             =   {{ manual_target_file }} ## get_calibrator_directions

# shift, average and add up stations for tied array
dppp_phaseup.control.type                 =   dppp
dppp_phaseup.control.max_per_node         =   {{ num_proc_per_node }}
dppp_phaseup.control.mapfile_out          =   prep_dirs.output.mapfile # tell the pipeline to give the output useful names
dppp_phaseup.argument.msin                =   ndppp_prep_target.output.mapfile    # The input data.
dppp_phaseup.argument.msin.datacolumn     =   CORRECTED_DATA
dppp_phaseup.argument.msout.datacolumn    =   DATA
dppp_phaseup.argument.msout.overwrite     =   True
dppp_phaseup.argument.steps               =   [shift, avg, adder, filter]
dppp_phaseup.argument.shift.type          =   phaseshift
dppp_phaseup.argument.shift.phasecenter   =   prep_dirs.output.cords
dppp_phaseup.argument.avg.type            =   squash
dppp_phaseup.argument.avg.freqstep        =   {{ shift_avg_freqstep }}
dppp_phaseup.argument.avg.timestep        =   {{ shift_avg_timestep }}
dppp_phaseup.argument.adder.type          =   stationadder
dppp_phaseup.argument.adder.stations      =   {{ phaseup_command }}
dppp_phaseup.argument.filter.type         =   filter
dppp_phaseup.argument.filter.baseline     =   {{ filter_command }}
dppp_phaseup.argument.filter.remove       =   True
dppp_phaseup.argument.numthreads	  =   {{ max_dppp_threads }}  ## this supersedes the control.environment

# Convert to circular polarisation (in place)
make_circ.control.type                    =   pythonplugin  
make_circ.control.executable              =   {{ scripts }}/execute_circ_pol_conv.py
make_circ.argument.flags                  =   [ dppp_phaseup.output.mapfile ]
make_circ.argument.cpath                  =   {{ scripts }}/lin2circ.py
make_circ.argument.mode                   =   lin2circ

# get a list of all subbands
make_concatmap.control.kind               =  plugin
make_concatmap.control.type               =  createMapfile
make_concatmap.control.method             =  mapfile_all_to_one
make_concatmap.control.mapfile_in         =  dppp_phaseup.output.mapfile
make_concatmap.control.mapfile_dir        =  input.output.mapfile_dir
make_concatmap.control.filename           =  make_concatmap.mapfile

# concatenate all of the files into one
dppp_concat.control.type                  =   dppp
dppp_concat.control.max_per_node          =   {{ num_proc_per_node }}
dppp_concat.argument.msin         	  =   make_concatmap.output.mapfile  # use the mapfile from the make_concatmap step
dppp_concat.argument.msin.datacolumn      =   DATA
dppp_concat.argument.msin.missingdata     =   True    #\ these two lines will make DPPP generate dummy data when
dppp_concat.argument.msin.orderms         =   False   #/ concatenating data
dppp_concat.argument.msout.datacolumn     =   DATA
dppp_concat.argument.steps                =   []
dppp_concat.argument.numthreads           =   {{ max_dppp_threads }}  ## this supersedes the control.environment

# derive the closure phase
closure_phase.control.type                =   pythonplugin
closure_phase.control.executable          =   {{ scripts }}/closure_v2.py
closure_phase.argument.flags              =   [dppp_concat.output.mapfile, {{ closure_phase_stations }}]

find_best_closure_phase_solutions
run_model_engine_script_and_self_cal

#####################################################################################################################################################################
#
#
#       GET BEST CALIBRATOR SOLUTIONS AND APPLY THEM
#
#
#####################################################################################################################################################################

find_best_solutions
apply_to_data

#####################################################################################################################################################################
#
#
#       FINAL TARGET IMAGING LOOP
#
#
#####################################################################################################################################################################

# access lotss to provide a catalogue of sources to use
get_imaging_catalogue.control.type	   = pythonplugin
get_imaging_catalogue.executable  	   = {{ scripts }}/download_lotss_skymodel.py
get_imaging_catalogue.flags 		   = [ndppp_prep_target.output.mapfile]
get_imaging_catalogue.DoDownload	   = {{ use_lotss_target }}
get_imaging_catalogue.SkymodelPath	   = {{ target_catalogue }}
get_imaging_catalogue.Radius		   = 1.5


# Loop through the target phase calibrator canditates
imaging_loop.control.kind                    =   loop
imaging_loop.control.type                    =   conditional
imaging_loop.control.loopcount               =   100
imaging_loop.control.loopsteps               =   [prep_dirs_img, dppp_phaseup_img, make_circ_img, make_concatmap_img, dppp_concat_img, run_imaging ]
## steps still to add: find phase solutions from nearest calibrator and copy them, run self-calibration sript (but only to image)

# Initialise file with all directions
prep_dirs_img.control.kind                    =   plugin
prep_dirs_img.control.type                    =   TargetListToMapfileX
prep_dirs_img.control.mapfile_dir             =   input.output.mapfile_dir
prep_dirs_img.control.infile                  =   ndppp_prep_target.output.mapfile ## ??
prep_dirs_img.control.filename                =   prep_dirs_img.mapfile
prep_dirs_img.control.wd                      =   {{ job_directory }}
prep_dirs_img.control.nP                      =   3 # default was three
prep_dirs_img.control.counter                 =   main_loop.output.counter
prep_dirs_img.control.target_file             =   {{ target_catalogue }}   ###

# shift, average and add up stations for tied array
dppp_phaseup_img.control.type                 =   dppp
dppp_phaseup_img.control.max_per_node         =   {{ num_proc_per_node }}
dppp_phaseup_img.control.mapfile_out          =   prep_dirs_img.output.mapfile # tell the pipeline to give the output useful names
dppp_phaseup_img.argument.msin                =   ndppp_prep_target_img.output.mapfile    # The input data.
dppp_phaseup_img.argument.msin.datacolumn     =   CORRECTED_DATA
dppp_phaseup_img.argument.msout.datacolumn    =   DATA
dppp_phaseup_img.argument.msout.overwrite     =   True
dppp_phaseup_img.argument.steps               =   [shift, avg, adder, filter]
dppp_phaseup_img.argument.shift.type          =   phaseshift
dppp_phaseup_img.argument.shift.phasecenter   =   prep_dirs_img.output.cords
dppp_phaseup_img.argument.avg.type            =   squash
dppp_phaseup_img.argument.avg.freqstep        =   {{ shift_avg_freqstep }}
dppp_phaseup_img.argument.avg.timestep        =   {{ shift_avg_timestep }}
dppp_phaseup_img.argument.adder.type          =   stationadder
dppp_phaseup_img.argument.adder.stations      =   {{ phaseup_command }}
dppp_phaseup_img.argument.filter.type         =   filter
dppp_phaseup_img.argument.filter.baseline     =   {{ filter_command }}
dppp_phaseup_img.argument.filter.remove       =   True
dppp_phaseup_img.argument.numthreads          =   {{ max_dppp_threads }}  ## this supersedes the control.environment

# Convert to circular polarisation (in place)
make_circ_img.control.type                    =   pythonplugin
make_circ_img.control.executable              =   {{ scripts }}/execute_circ_pol_conv.py
make_circ_img.argument.flags                  =   [ dppp_phaseup_img.output.mapfile ]
make_circ_img.argument.cpath                  =   {{ scripts }}/lin2circ.py
make_circ_img.argument.mode                   =   lin2circ

# get a list of all subbands
make_concatmap_img.control.kind               =  plugin
make_concatmap_img.control.type               =  createMapfile
make_concatmap_img.control.method             =  mapfile_all_to_one
make_concatmap_img.control.mapfile_in         =  dppp_phaseup_img.output.mapfile
make_concatmap_img.control.mapfile_dir        =  input.output.mapfile_dir
make_concatmap_img.control.filename           =  make_concatmap_img.mapfile

# concatenate all of the files into one
dppp_concat_img.control.type                  =   dppp
dppp_concat_img.control.max_per_node          =   {{ num_proc_per_node }}
dppp_concat_img.argument.msin          	      =   make_concatmap_img.output.mapfile  # use the mapfile from the make_concatmap step
dppp_concat_img.argument.msin.datacolumn      =   DATA
dppp_concat_img.argument.msin.missingdata     =   True    #\ these two lines will make DPPP generate dummy data when
dppp_concat_img.argument.msin.orderms         =   False   #/ concatenating data
dppp_concat_img.argument.msout.datacolumn     =   DATA
dppp_concat_img.argument.steps                =   []
dppp_concat_img.argument.numthreads           =   {{ max_dppp_threads }}  ## this supersedes the control.environment

run_imaging.control.type 		      =   pythonplugin
run_imaging.control.executable		      =   {{ scripts }}/self_calibration_and_imaging.py


make_circ_img.argument.flags                  =   [ dppp_phaseup_img.output.mapfile ]
make_circ_img.argument.cpath                  =   {{ scripts }}/lin2circ.py
make_circ_img.argument.mode                   =   lin2circ



#####################################################################################################################################################################
#
#
#	End of pipeline
#
#
#####################################################################################################################################################################
