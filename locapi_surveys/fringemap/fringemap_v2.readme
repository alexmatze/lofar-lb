fringemap.py - Produces fringe-rate - delay maps of the sky
-----------------------------------------------------------

Neal Jackson, 2015 August.

This parseltongue script produces FRD maps of areas of sky, using u-v data
on an AIPS disk. You define a reference antenna (usually the superterp) and
another antenna, or list of antennas. Maps are then produced on all baselines
to the reference antenna. You can produce maps singly, or add them in a
noise-weighted way. Maps should only be made over a time-range which is
reasonably phase coherent. If the dataset is longer than this, you should
make maps separately for each baseline, for each coherent time-chunk, and
then add them all at the end.

The maps you get are typically several degrees across. There is a Fourier 
transform relation between the data, i.e. phase as a function of time and
frequency, and the FRD map. Therefore the size of the map in one direction 
is controlled by the time resolution, and in the other direction by the
frequency resolution. Data which are heavily averaged will therefore produce
relatively poor maps. The program knows about channels and IFs, and treats
these sensibly (hopefully). Conversely, the resolution of the map in each
direction is controlled by the size of the time chunk (and hence by the
phase coherence) and in the other direction by the total bandwidth. FRD
maps have therefore much poorer resolution than interferometric images, but
are much easier and quicker to produce. They are most useful as a "finding
chart" to tell you what sources have coherent flux on the baselines you
are interested in.

In order to use the program, amend the line at the end of the script and
run it (parseltongue fringemap_v2.py; remember to source the LOGIN.CSH
file in the aips root directory first). The arguments to the program are 
as follows:

Compulsory arguments:

1) AIPS number 
2) AIPS INNAME of the data file you want. If you want to do something
complicated (e.g. multiple time-chunks) it will save time if you use INDXR
to create an index table first (otherwise the script will look all the
way through searching for times).
3) Array of names of the antennas. This should be provided as a Python list,
e.g. ['DE601','DE603','UK608']. The first five letters of the array are
compared, so 'DE601HBA1INNER007' will be OK. The script should stop 
immediately if any antennas you specify are not present.
4) Name of reference antenna, e.g. 'ST001' - nb some datasets have 'TS001'.

The following arguments have defaults:

5) imaxoff. This specifies the size of the maps you want, in degrees. If
you leave this as zero, you will get a lot of FITS files each containing
a single baseline, scaled so that they fit into the map, but with each
baseline mapped on to a different-size grid. If you specify a number in
degrees, the FITS files will be produced, and then added together into
a final map.

6) AIPS INCLASS of the data file you want - defaults to FITS.

7-9) utstart, utend, utinc. These are times in DAYS which delineate the
time-chunk(s) of data you want. They have the following behaviour:

0, 0, 0:  do one chunk consisting of the whole file. This is not what you 
          want if the observation length is longer than the phase coherence 
          time.
0, 0, z:  do the whole file, in multiple chunks of length z days.
x, y, x:  do from UT=x to UT=y in chunks of length z days.
x, y, 0:  do one chunk from UT=x to UT=y.

10) fsiz: Output size, in pixels, of the FRD maps. 256 works pretty well
unless you have very finely-channelled data.

11) dofilt: This is an option to clean up the FRD maps for "diffraction
spikes". Bad bits in the data can Fourier transform to spikes in the map,
and this option tries to clean them up (at the cost of possibly removing
data).

12) indisk: AIPS INDISK of your data file (defaults to 1)

13) frifiledir: Disk to dump plots to (needs the trailing slash). NB - there
can be quite a lot of these. By default, all these files (beginning FR_) are
removed by the script when it starts. The reason is that all extant FR_
files are added together at the end to produce multi-chunk plots, and
without this removal you would get previous runs' data added to the current
plot.

14) w_max: By default (and provided you have the astLib package installed),
you will get crosses overplotted at the positions of WENSS sources. w_max
controls the limiting WENSS flux for the overplotting.

15) zap: Controls whether files beginning FR_ are removed at the start of
the script.

